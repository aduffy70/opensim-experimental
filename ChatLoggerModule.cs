/*
 * Copyright (c) Contributors http://github.com/aduffy70/Chat-Logger
 * See CONTRIBUTORS.TXT for a full list of copyright holders.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Chat-Logger Module nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


using System;
using System.Collections.Generic;
using System.Reflection;

using log4net;
using Nini.Config;
using OpenMetaverse;

using OpenSim.Framework;
using OpenSim.Region.Framework;
using OpenSim.Region.Framework.Interfaces;
using OpenSim.Region.Framework.Scenes;

namespace ChatLogger {

	public class ChatLoggerModule : IRegionModule
	{
        //Configuration settings read from ChatLogger.ini
		bool m_enabled = false;
        string m_logPath = "./"; //Path to the folder where logs will be stored - defaults to the bin folder
        int m_commandChannel = 18; //module listens for commands on this channel
        int m_logChannel = 0; //module logs all chat heard on this channel
        string m_instanceTag = "myregion"; //unique string to identify files generated by this instance (in case you have multiple servers all writing to files in one log folder)

        string m_chatLog; //Path and filename of the chat log
		private List<Scene> m_scenes = new List<Scene>();
		bool m_logging = false; // is chat currently being logged?

		//Set up logging and console messages
		private static readonly ILog m_log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

		#region IRegionModule interface

        public void Initialise(Scene scene, IConfigSource config)
		{
            //Read configuration settings
            IConfig chatLoggerConfig = config.Configs["ChatLogger"];
			if (chatLoggerConfig != null)
			{
				m_enabled = chatLoggerConfig.GetBoolean("enabled", true);
                m_logPath = chatLoggerConfig.GetString("log_path", "./");
                m_commandChannel = chatLoggerConfig.GetInt("command_channel", 18);
                m_logChannel = chatLoggerConfig.GetInt("log_channel", 0);
                if ((m_commandChannel == 0) || (m_commandChannel == m_logChannel))
                {
                    m_enabled = false;
                    m_log.WarnFormat("[ChatLogger]: Command channel cannot be 0 or the same as the log channel.  Disabling module...");
                }
                m_instanceTag = chatLoggerConfig.GetString("instance_tag", "myregion");
			}
			if (m_enabled)
			{
				lock (m_scenes)
                {
                    if (!m_scenes.Contains(scene))
                    {
                        m_scenes.Add(scene);
                        m_log.WarnFormat("[ChatLogger]: Initialized region {0}", scene.RegionInfo.RegionName);
                    }
                }
            }
        }


        public void PostInitialise()
        {
            if (m_enabled)
            {
                //Assemble the paths and file names we will be using
                m_chatLog = System.IO.Path.Combine(m_logPath, m_instanceTag + "-chat.log");
                //Register for events
                lock (m_scenes)
                {
                    foreach (Scene scene in m_scenes)
                    {
                        scene.EventManager.OnChatFromClient += OnClientChat; //Avatar chat
                        scene.EventManager.OnChatFromWorld += OnWorldChat; //Object chat
                        scene.EventManager.OnChatBroadcast += OnBroadcast; //Module chat (e.g., the IRCBridge Module)
                        scene.EventManager.OnMakeRootAgent += OnVisit; //Avatars entering region
                        m_log.WarnFormat("[ChatLogger] PostInitialized region {0}", scene.RegionInfo.RegionName);
                    }
                }
            }
        }

        public void Close()
		{
        }

        public string Name
		{
            get { return "Chat Logger Module"; }
        }

        public bool IsSharedModule
		{
            get { return true; }
        }

        #endregion

        void OnVisit(ScenePresence presence) //All avatars entering the region are notified if chat is being logged.
        {
            if (m_logging == true)
            {
                IDialogModule dialogMod = m_scenes[0].RequestModuleInterface<IDialogModule>(); //If there are multiple regions, we only need to get this for one and it doesn't matter which one
                if (dialogMod != null)
                {
                    m_log.Info("[ChatLogger] Notified " + presence.Firstname + " " + presence.Lastname + " that chat is being logged...");
                    dialogMod.SendAlertToUser(presence.ControllingClient, "Chat Logger is active - All text chat will be recorded...", true);
                }
            }
        }

		void OnClientChat(Object sender, OSChatMessage chat)
		{
            if ((chat.Message == "") || ((chat.Channel != m_logChannel) && (chat.Channel != m_commandChannel))) //Ignore empty messages or messages not on the log channel or command channel
            {
				return;
            }
			else if ((chat.Channel == m_logChannel) && (m_logging == true)) //Chat to be logged
            {
                string senderName = m_scenes[0].CommsManager.UserProfileCacheService.GetUserDetails(chat.SenderUUID).UserProfile.Name;
                LogChat(senderName, chat.Message);
            }
            else if (chat.Channel == m_commandChannel) //Commands for the module
            {
                ProcessCommand(chat.Message.ToLower());
			}
		}

		void OnWorldChat(Object sender, OSChatMessage chat)
		{
            if ((chat.Channel != m_logChannel) && (chat.Channel != m_commandChannel)) //Ignore messages not on the log channel or command channel
            {
				return;
            }
			else if ((chat.Channel == m_logChannel) && (m_logging == true)) //Chat to be logged
            {
                LogChat(chat.From, chat.Message);
            }
            else if (chat.Channel == m_commandChannel) //Commands for the module
            {
                ProcessCommand(chat.Message.ToLower());
			}
		}

		void OnBroadcast(Object sender, OSChatMessage chat)
		{
            if ((chat.Channel != m_logChannel) && (chat.Channel != m_commandChannel)) //Ignore empty messages or messages not on the log channel or command channel
            {
				return;
            }
			else if ((chat.Channel == m_logChannel) && (m_logging == true)) //Chat to be logged
            {
                LogChat("**Broadcast**", chat.Message); //If I knew all the possible sources of Broadcasts I could have the actual source displayed instead of **Broadcast**
            }
            else if (chat.Channel == m_commandChannel) //Commands for the module
            {
                ProcessCommand(chat.Message.ToLower());
			}
		}

        void LogChat(string sender, string message)
        {
            System.IO.StreamWriter logFile = System.IO.File.AppendText(m_chatLog);
            logFile.WriteLine("[" + DateTime.Now + "] " + sender + ": " + message);
            logFile.Close();
        }

        void ProcessCommand(string message)
        {
            if (message == "off")
            {
                if (m_logging == true)
                {
                    m_logging = false;
                    m_log.Info("[ChatLogger] Chat logging off...");
                    DialogToAll("Chat Logger: Off - Text chat will NOT be recorded...");
                }
                else
                {
                    m_log.Info("[ChatLogger] Stop requested, but chat is not being logged...");
                    DialogToAll("Chat Logger: Cannot stop logging because logging is already off...");
                }
            }
            else if (message == "on")
            {
                if (m_logging == false)
                {
                    m_logging = true;
                    m_log.Info("[ChatLogger] Chat logging on...");
                    DialogToAll("Chat Logger: On - All text chat will be recorded...");
                }
                else
                {
                    m_log.Info("[ChatLogger] Start requested, but chat is already being logged...");
                    DialogToAll("Chat Logger: Cannot start logging because chat is already being logged");
                }
            }
            else if (message == "reset")
            {
                if (m_logging == true)
                {
                    m_log.Info("[ChatLogger] Reset requested, but logging must be stopped first...");
                    DialogToAll("Chat Logger: Cannot reset because chat is currently being logged...");
                }
                else
                {
                    m_log.Info("[ChatLogger] Clearing the chat log...");
                    DialogToAll("Chat Logger: Clearing the chat log...");
                    System.IO.File.Delete(m_chatLog);
                }
            }
            else
            {
                DialogToAll("Chat Logger: Invalid command...");
                m_log.Info("[ChatLogger] Invalid command...");
            }
        }

        void DialogToAll(string dialogMessage) //All avatars in the region are notified when logging is turned on, off, or the log is cleared
        {
            foreach (Scene scene in m_scenes)
            {
                IDialogModule dialogMod = scene.RequestModuleInterface<IDialogModule>();
                if (dialogMod != null)
                {
                    dialogMod.SendGeneralAlert(dialogMessage);
                }
            }
        }
    }
}
